shiny::runApp()
shiny::runApp()
runApp()
summary(csv.data)
summary(csv.data$liverweight)
runApp()
runApp()
runApp()
runApp()
library(plotly)
View(csv.data)
a <- csv.data[,-c(1:3)]
View(a)
rm(a)
View(csv.data)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(csv.data)
subset(csv.data, age == 6 & serialno == 70315 & no == 1)
shiny::runApp()
csv.data <- read.csv("finalData.csv", header = TRUE, sep=',', dec = '.')
runApp()
View(csv.data)
path <- "codotoliths\2018\70425_Del2\Nr01_age01"
path <- "codotoliths\\2018\\70425_Del2\\Nr01_age01"
split_path(path)
csv.data$cruise
typeof(csv.data$cruise)
typeof(as.character(csv.data$cruise))
a <- as.character(csv.data$cruise)
a
a[2]
a[,2]
subset(csv.data, age == 1 & serialno == 70425 & no == 1 & as.character(cruise)[1:4] == "2018")
subset(csv.data, age == 1 & serialno == 70425 & no == 1 & cruise == "2018")
subset(csv.data, age == 1 & serialno == 70425 & no == 1 & cruise == 2018)
subset(csv.data, age == 1 & serialno == 70425 & no == 1 & substr(as.character(csv.data$cruise),4) == 2018)
subset(csv.data, age == 1 & serialno == 70425 & no == 1 & substr(as.character(csv.data$cruise),1,4) == 2018)
a <- split_path(path)
a
a[3]
path <- "codotoliths\\2018\\70425_Del2\\Nr01_age01\\IMG_1533.JPG"
split.path <- split_path(path)
split.path
year <- split.path[4]
subset(csv.data, age == 1 & serialno == 70425 & no == 1 & substr(as.character(csv.data$cruise),1,4) == "2018")
serial.no <- split.path[3]
serial.no
length(serial.no)
nchar(serial.no)
test <- unlist(str_split(serial.no, "_"))
test
test <- unlist(str_split(serial.no, "_"))[1]
test
# split full path and returns corresponding row in csv.data
row_from_path <- function(path, csv.data){
split.path <- split_path(path)
year <- split.path[4]
serial.no <- split.path[3]
no.age <- split.path[2]
a <- unlist(str_split(no.age, "_")) # Nr06 & age08 as output
no_ <- unlist(str_split(a[1],"r"))[2]
age_ <- unlist(str_split(a[2],"e"))[2]
# if folder is Del
if(nchar(serial.no)!=5){
serial.no.final <- unlist(str_split(serial.no, "_"))[1] # "70425"
return(subset(csv.data, age == as.integer(age_) & serialno == as.integer(serial.no.final) & no == as.integer(no_)
& substr(as.character(csv.data$cruise),1,4) == year & samplenumber == 2))
} else {
return(subset(csv.data, age == as.integer(age_) & serialno == as.integer(serial.no) & no == as.integer(no_)
& substr(as.character(csv.data$cruise),1,4) == year & samplenumber == 1))
}
}
split.path <- split_path(path)
year <- split.path[4]
serial.no <- split.path[3]
no.age <- split.path[2]
a <- unlist(str_split(no.age, "_")) # Nr06 & age08 as output
no_ <- unlist(str_split(a[1],"r"))[2]
age_ <- unlist(str_split(a[2],"e"))[2]
# if folder is Del
if(nchar(serial.no)!=5){
serial.no.final <- unlist(str_split(serial.no, "_"))[1] # "70425"
return(subset(csv.data, age == as.integer(age_) & serialno == as.integer(serial.no.final) & no == as.integer(no_)
& substr(as.character(csv.data$cruise),1,4) == year & samplenumber == 2))
} else {
return(subset(csv.data, age == as.integer(age_) & serialno == as.integer(serial.no) & no == as.integer(no_)
& substr(as.character(csv.data$cruise),1,4) == year & samplenumber == 1))
}
nchar(serial.no)!=5
serial.no.final <- unlist(str_split(serial.no, "_"))[1] # "70425"
return(subset(csv.data, age == as.integer(age_) & serialno == as.integer(serial.no.final) & no == as.integer(no_)
& substr(as.character(csv.data$cruise),1,4) == year & samplenumber == 2))
subset(csv.data, age == as.integer(age_) & serialno == as.integer(serial.no.final) & no == as.integer(no_)
& substr(as.character(csv.data$cruise),1,4) == year & samplenumber == 2)
cor(x = csv.data$weight, y=csv.data$gonadweight, method = "kendall", use = "complete.obs")
cor.test(x = csv.data$weight, y=csv.data$gonadweight, method=c("pearson", "kendall", "spearman"))
mcor <- cor(x = csv.data[,-c(1:4)], use = "complete.obs")
mcor
mcor[,6]
mcor[,6]
cor.test()
sum(is.na(csv.data$weight))
sum(is.na(csv.data$liverweight))
View(csv.data)
mcor[,6]
na.omit(csv.data$weight)
weight <- csv.data$weight
gonadweight <- csv.data$gonadweight
plot(gonadweight,weight,main = "Polynomial Regression", las=1 )
model3 <- lm(gonadweight ~ poly(na.omit(weight),2))
mcor[,6]
View(mcor)
lmGonadLiver = lm(gonadweight~liverweight, data = csv.data) #Create the linear regression
summary(lmGonadLiver) #Review the results
plot(lmGonadLiver)
predict(lmGonadweight, as.data.frame(0.027))
a <- data.frame(0.027)
colnames(a) <- "weight"
predict(lmGonadweight, a)
predict(lmGonadLiver, a)
colnames(a) <- "liverweight"
predict(lmGonadLiver, a)
rm(a)
cor.test(x = csv.data$weight, y=csv.data$gonadweight, method=c("pearson", "kendall", "spearman"))
test <- csv.data
test[gonadweight] <- lapply(test[gonadweight],function(x){ x*100})
lapply(test[gonadweight],function(x){ x*100})
test[gonadweight]
test[gonadweight]
View(test)
test["gonadweight"]
lapply(test["gonadweight"],function(x){ x*100})
View(test)
typeof(lapply(test["gonadweight"],function(x){ x*100}))
as.data.frame(lapply(test["gonadweight"],function(x){ x*100}))
temp <- as.data.frame(lapply(test["gonadweight"],function(x){ x*100}))
test[,"gonadweight"] <- temp
cor(x = test[,-c(1:4)], use = "complete.obs")
lmGonadweight_new = lm(gonadweight~weight, data = test)
summary(lmGonadweight_new)
p <- as.data.frame(152)
colnames(p) <- "weight"
predict(lmGonadweight_new, p)
rm(temp)
shiny::runApp()
runApp()
library(caret)
?confusionMatrix
shiny::runApp()
shiny::runApp()
?boxplot.stats
boxplot.stats(csv.data$weight)
csv.data['age'==1]
View(csv.data['age']==1)
View(csv.data['age']=1)
subset(x=csv.data, age =1)
subset(x=csv.data, age ==1)
t <- subset(x=csv.data, age ==1)
t$weight
boxplot(t$weight)
boxplot.stats(t$weight)
boxplot.stats(t$weight)$out
shiny::runApp()
t <- subset(x=csv.data, age ==9)
boxplot.stats(t$weight)$out
outliers <- boxplot.stats(t$weight)$out
outliers[2]
which(csv.data$weight %in% c(outliers[2]))
length(outliers)
outliers[length(outliers)]
which(csv.data$weight %in% c(outliers[length(outliers)])
)
which(csv.data$weight %in% c(outliers[length(outliers)]))
shiny::runApp()
t <- subset(x=csv.data, age ==6)
outliers <- boxplot.stats(t$weight)$out
outliers
boxplot.stats(t$weight)
shiny::runApp()
boxplot.stats(t$weight)$stats
boxplot.stats(t$weight)$stats[length(boxplot.stats(t$weight)$stats)]
upper.fence <- boxplot.stats(t$weight)$stats[length(boxplot.stats(t$weight)$stats)]
shiny::runApp()
which(csv.data$weight %in% 47.5)
shiny::runApp()
which(csv.data$weight %in% 17.44)
outliers <- boxplot.stats(t$weight)$out
which(csv.data$weight %in% c(outliers[length(outliers)]))
which(csv.data$weight %in% c(17.44))
outliers
outliers[length(outliers)]
runApp()
which(csv.data$weight %in% 17000.44)
runApp()
which(csv.data$length %in% 47.5)
runApp()
View(csv.data)
which(grepl(47.5,csv.data$length))
which(grepl(47.5,csv.data$length) && grepl(1,csv.data$age))
which(grepl(47.5,csv.data$length) | grepl(1,csv.data$age))
which(csv.data$length == 47.5)
which(csv.data[,"length"]==47.5)
which(csv.data[,"length"]==47.5 && csv.data[,"age"]==1)
which(csv.data[,"length"]==47.5 | csv.data[,"age"]==1)
which(csv.data[,"length"]==47.5 && csv.data[,"weight"]==926)
typeof(csv.data$age)
typeof(csv.data$length)
which(csv.data[,"length"]==47.5 & csv.data[,"age"]==1)
csv.data[726,]
View(t)
copie <- csv.data
copie[726,"length"] <- NA
copie[726,"length"]
rm(t)
rm(p)
rm(test)
rm(lmGonadLiver)
rm(lmGonadweight_new)
rm(mcor)
rm(copie)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(csv.data)
runApp()
View(csv.data)
param <- "length"
val <- 47.5
age <- 1
row_number <- which(csv.data[,param]==val & csv.data[,"age"]==age)
row_number
csv.data[row_number,param]  <- NA
View(csv.data)
runApp()
View(csv.data)
runApp()
View(csv.data)
runApp()
View(csv.data)
shiny::runApp()
runApp()
runApp()
